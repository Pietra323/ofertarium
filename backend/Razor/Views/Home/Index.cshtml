@inject IHttpClientFactory _clientFactory
@using backend.Data.Models

@if (TempData["LoginMessage"] != null)
{
    <div>@TempData["LoginMessage"].ToString()</div>
}

@{
    ViewData["Title"] = "Home Page";
}

@model backend.Data.Models.User

@if (Context.Session.GetString("IsLoggedIn") != "true")
{
    <form method="post" asp-action="AddUser" id="lol">
        <input asp-for="Name" />
        <input asp-for="LastName" />
        <input asp-for="Username" />
        <input asp-for="Email" />
        <input asp-for="Password" />
        <button type="submit">Submit</button>
    </form>

    <form method="post" asp-action="Login" id="loginForm">
        <input asp-for="Username" />
        <input asp-for="Password" />
        <button type="submit">Zaloguj</button>
    </form>
}
<select id="categoryFilter" class="form-select">
</select>
<button id="resetFilter">Resetuj filtry</button>
<div id="products" class="container-md">
</div>

<div class="modal fade" id="addToCartModal" tabindex="-1" aria-labelledby="addToCartModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addToCartModalLabel">Produkt dodany do koszyka</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Produkt został pomyślnie dodany do koszyka.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const categoryFilter = document.getElementById('categoryFilter');
        const resetFilterButton = document.getElementById('resetFilter');
        const productsDiv = document.getElementById('products');
        const userId = '@Context.Session.GetString("UserId")';
        const isLoggedIn = '@Context.Session.GetString("IsLoggedIn")' === 'true';
        const addToCartModal = new bootstrap.Modal(document.getElementById('addToCartModal'));

        function displayProducts(categoryId) {
            let url = 'http://localhost:5004/api/products';
            if (categoryId !== 'Wszystkie kategorie') {
                url += '/api/products/' + categoryId;
            }
            console.log("to ja"+url);
            fetch(url)
                .then(response => response.json())
                .then(data => {
                console.log(data);
                    productsDiv.innerHTML = '';
                    data.$values.forEach(product => {
                        const productDiv = document.createElement('div');
                        productDiv.classList.add("card")
                        productDiv.innerHTML = `
                                    <h2>${product.productName}</h2>
                                    <p>${product.subtitle}</p>
                                    <p>Cena: ${product.price}</p>
                                    <p>Ilość: ${product.amountOf}</p>
                                    <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                                        <div class="carousel-indicators">
                                            ${product.photos.$values.map((photo, index) => `<button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="${index}" ${index === 0 ? 'class="active"' : ''} aria-current="${index === 0}"></button>`).join('')}
                                        </div>
                                        <div class="carousel-inner">
                                            ${product.photos.$values.map((photo, index) => `<div class="carousel-item ${index === 0 ? 'active' : ''}"><img src="${photo}" class="d-block w-100" alt="${product.productName}"></div>`).join('')}
                                        </div>
                                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                            <span class="visually-hidden">Previous</span>
                                        </button>
                                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                            <span class="visually-hidden">Next</span>
                                        </button>
                                    </div>
                                    ${isLoggedIn ? `<button class="addToCart btn btn-primary" data-product-id="${product.idProduct}">Dodaj do koszyka</button>` : ''}
                                `;
                        productsDiv.appendChild(productDiv);
                    });
                    if (isLoggedIn) {
                        document.querySelectorAll('.addToCart').forEach(button => {
                            button.addEventListener('click', () => {
                                const productId = button.getAttribute('data-product-id');
                                fetch(`http://localhost:5004/api/Basket/add?productId=${productId}&userId=${userId}`, { method: 'POST' })
                                    .then(() => {
                                        addToCartModal.show(); // Show the modal after adding a product to the cart
                                    });
                            });
                        });
                    }
                });
        }

        categoryFilter.addEventListener('change', () => {
            const selectedCategory = categoryFilter.value;
            console.log(selectedCategory);
            displayProducts(selectedCategory);
        });

        resetFilterButton.addEventListener('click', () => {
            categoryFilter.value = 'Wszystkie kategorie';
            displayProducts('Wszystkie kategorie');
        });

        fetch('http://localhost:5004/api/category')
            .then(response => response.json())
            .then(data => {
                data.$values.forEach(category => {
                    const option = document.createElement('option');
                    option.value = category.id;
                    option.textContent = category.nazwa;
                    categoryFilter.appendChild(option);
                });
                displayProducts('Wszystkie kategorie');
            });
            
    </script>
}